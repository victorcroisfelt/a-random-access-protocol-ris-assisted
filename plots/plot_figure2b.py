"""Plot Figure 2b

This script plots Fig. 2b of the paper:

V. Croisfelt, F. Saggese, I. Leyva-Mayorga, R. Kotaba, G. Gradoni and P. Popovski, "A Random Access Protocol for RIS-
Aided Wireless Communications," 2022 IEEE 23rd International Workshop on Signal Processing Advances in Wireless
Communication (SPAWC), 2022, pp. 1-5, doi: 10.1109/SPAWC51304.2022.9833984.

Authors: @victorcroisfelt, @lostinafro
Date: 28/07/2022

Specific dependencies:
    - ../data/figure2.npz: data file generated by running sim_figure2.py
"""

import numpy as np

import matplotlib.pyplot as plt
from matplotlib import rc

# LaTeX type definitions
rc('font', **{'family': 'sans serif', 'serif': ['Computer Modern'], 'size': 14})
rc('text', usetex=True)

########################################
# Loading
########################################
# Slot duration
T = 0.1

# Config. duration
Tconfig = T

# Load data
data = np.load('../data/figure2.npz')

num_ues_range = data['num_ues_range']
num_configs_range = data['num_configs_range']

total_num_successful_attempts = data['total_num_successful_attempts']

# Compute throughput denominator
den_thr_aloha = num_configs_range * (T + Tconfig)
den_thr = 2 * den_thr_aloha

# Compute throughput
throughput = np.zeros_like(total_num_successful_attempts)

throughput[0, :, :, :] = total_num_successful_attempts[0, :, :, :] / den_thr_aloha[:, None, None]
throughput[1, :, :, :] = total_num_successful_attempts[1, :, :, :] / den_thr[:, None, None]
throughput[2, :, :, :] = total_num_successful_attempts[2, :, :, :] / den_thr[:, None, None]

# Compute average throughput
avg_throughput = np.nanmean(throughput, axis=-1)

# Get the best
opt_num_configs = np.nanargmax(avg_throughput, axis=1)
opt_throughput = np.nanmax(avg_throughput, axis=1)

########################################
# Plot
########################################
fig, ax = plt.subplots()

colors = ['black', '#ef5675', '#7a5195']
styles = ['-', '--', ':']
methods = ['URP', 'CARP', 'SCP']

# Go through all methods
for mm in range(3):
    ax.plot(num_ues_range, opt_throughput[mm], linewidth=2, linestyle=styles[mm], color=colors[mm], label=methods[mm])

# Set axis
ax.set_xlabel(r'number of contending UEs, $K$')
ax.set_ylabel(r'avg. ${\mathrm{th}}(S^{\star})$ [pkt./slot]')

# Legend
ax.legend(fontsize='x-small', framealpha=0.5)

#ax.set_xticks(np.arange(1, 11))

ax.set_yscale('log')

plt.grid(color='#E9E9E9', linestyle='--', linewidth=0.5)

plt.tight_layout()

plt.show(block=False)